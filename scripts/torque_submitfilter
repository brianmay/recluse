#!/usr/local/sbin/known_good_python

# Written by Brett Pemberton (brett@vpac.org), Sam Morrison (sam@vpac.org)
# Copyright (C) 2008 Victorian Partnership for Advanced Computing

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import xmlrpclib
import datetime
import sys, os, pwd
import getopt

url = 'https://www.vpac.org/accounts/xmlrpc/'
banned_users = ("sudip")

def project_under_quota(project_id):
    server = xmlrpclib.Server(url)
    try:
        return server.project_under_quota(project_id)
    except:
        print >> sys.stderr, "ERROR: Can't contact the vpac.org accounts system.  Sorry, but jobs cannot be submitted at present.\nPlease try again later"
        sys.exit(-1)
    
def get_project(username, project_id=''):
    server = xmlrpclib.Server(url)
    try:
        return server.get_project(username, project_id)
    except:
        print >> sys.stderr, "ERROR: Can't contact the vpac.org accounts system.  Sorry, but jobs cannot be submitted at present.\nPlease try again later"
        sys.exit(-1)

def check_shell(shell):
    shells = open('/etc/shells', 'r')
    valid_shells = shells.readlines()
    valid_shells = [x.replace('\n', '') for x in valid_shells]

    # allow perl as well, even though it isn't a valid shell
    valid_shells.append('/usr/bin/perl')

    shells.close()
    if shell in valid_shells:
        if shell == "/bin/sh":
            return "/bin/bash"
        return shell

    where = shell.rfind('/')
    last_part = shell[where:].rstrip()
    for line in valid_shells:
        if last_part in line:
            return line

    return False

 
if __name__ == "__main__":

    username = pwd.getpwuid(os.getuid()) [0]

    if username in banned_users:
        print "User " + username + " has been blocked from submitting jobs\nIf you feel this is not correct, please email help@vpac.org"
        sys.exit(-1)

    # Try and get email from .forward
    homedir = os.path.expanduser('~')

    try:
        f = open('%s/.forward' % homedir, 'r')
        email = f.readlines()[2]
        f.close()
    
    except:
        email = "unknown@vpac.org"
        pass

    #Parse Opts
    opts, args = getopt.getopt(sys.argv[1:], 'a:A:b:c:C:d:D:e:hIj:k:l:m:M:N:o:p:q:rS:t:u:XW:v:Vz')
    opts = dict(opts)

    if '-A' in opts:
        print "Projects cannot be specified on the command line with -A\nPlease do so in your pbs-script, with a '#PBS -A Project' line"
        sys.exit(-1)

    if '-M' in opts:
        email = opts['-M']

    pbs_in = sys.stdin.readlines() 
    
    first_line = pbs_in[0]

    error_and_die = False
    newfirstline = ""
    insert_first_line = False

    if first_line.startswith('#!'):
        where = first_line.find(' ')
        shell = first_line[2:where].replace('\r', '')
        newshell = check_shell(shell)

        if newshell == False:
            error_and_die = True
            error = "The shell you specified in your PBS script (" + shell + ") does not exist on VPAC.\nYou may wish to email help@vpac.org to get it installed, or consider using one of the more commonly available shells such as bash.\nUnfortunately, we can't run your job\n"
	elif newshell == "/bin/bash" and shell == "/bin/sh":
            newfirstline = "#!" + newshell + "\n"
            print >> sys.stderr, "Warning: the shell you specified in your PBS script (" + shell + ") is not recommended for use at VPAC."
            print >> sys.stderr, "We recommend you use " + newshell + " instead.  Please update your script with the new shell\n"
        elif newshell != shell:
            newfirstline = "#!" + newshell + "\n"
            print >> sys.stderr, "Warning: the shell you specified in your PBS script (" + shell + ") does not exist in this location at VPAC."
            print >> sys.stderr, "It can be found instead at " + newshell + " .  Please update your script with the correct location\n"

    else:
        newfirstline = "#!/bin/bash\n"
        insert_first_line = True
        print >> sys.stderr, "Warning: you did not specify a shell in the first line of your PBS script"
        print >> sys.stderr, "We have assumed you wish to use bash, however please update your script with a valid shell\n"

    have_hit_command_already = False
    have_hit_email_already = False
    have_hit_project_already = False
    comment_end_line, email_line, project_line, i = 0,0,0,0

    # iterate over rest of lines
    for line in pbs_in[1:]:

        i += 1
        
        if line.startswith('#PBS -S'):
            shell = line.split(' ')[2].rstrip()
            newshell = check_shell(shell)

            if newshell == False:
                error_and_die = True
                error = "The shell you specified in your PBS script (" + shell + ") does not exist on VPAC.\nYou may wish to email help@vpac.org to get it installed, or consider using one of the more commonly available shells such as bash.\nUnfortunately, we can't run your job\n"
            elif newshell == "/bin/bash" and shell == "/bin/sh":
                newfirstline = "#!" + newshell + "\n"
                print >> sys.stderr, "Warning: the shell you specified in your PBS script (" + shell + ") is not recommended for use at VPAC."
                print >> sys.stderr, "We recommend you use " + newshell + " instead.  Please update your script with the new shell\n"
            elif newshell != shell:
                pbs_in[i] = "#PBS -S " + newshell + "\n"
                newfirstline = "#!" + newshell + "\n"
                error_and_die = False
                print >> sys.stderr, "Warning: the shell you specified in your PBS script (" + shell + ") does not exist in this location at VPAC."
                print >> sys.stderr, "It can be found instead at " + newshell + " .  Please update your script with the correct location\n"
            else:
                newfirstline = "#!" + newshell + "\n"
                error_and_die = False

        if line.startswith('#PBS -M'):
            have_hit_email_already = True

        if line.startswith('#PBS -A'):
            project_id = line.split(' ')[2]
            project = get_project(username, project_id)
            pbs_in[i] = "#PBS -A " + project + "\n"
            have_hit_project_already = True

        if (not line.startswith('#')) and line != "\n" and line != "\r" and line != "\r\n" and line != "\n\r":

            if comment_end_line == 0:
                comment_end_line = i

            if not have_hit_project_already:
                project = get_project(username)
                project_line = i
                have_hit_project_already = True

            if not have_hit_email_already:
                email_line = i
                have_hit_email_already = True

    if email_line > 0:
        pbs_in.insert(email_line, "#PBS -M " + email + "\n")
    if project_line > 0:
        pbs_in.insert(project_line, "#PBS -A " + project + "\n")

    if newfirstline != "":
        if insert_first_line:
            pbs_in.insert(0,newfirstline)
        else:
            pbs_in[0] = newfirstline

    if project_under_quota(project) == False:
            print >> sys.stderr, 'This job has been queued, but your project ' + project + ' is over quota.\nThe job will not run until the projects 90 day usage is below quota.\nFor more information please see http://vpac.org/quota\n'

    if error_and_die == True:
        print error
        sys.exit(-1)

    sys.stdout.writelines(pbs_in)
