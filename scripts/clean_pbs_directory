#!/bin/bash

# clean_pbs_directory -- script to clean up pbs while down, and copy undelivered files

# Written by Brett Pemberton, brett@vpac.org
# Copyright (C) 2008 Victorian Partnership for Advanced Computing

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

test=0
hostname=$(hostname | sed -e 's/\..*//')
cluster=$(echo $hostname | sed -e 's/[0-9][0-9][0-9]//' -e 's/-m$//')

if [ "$hostname" == "${cluster}-m" ]
then
        echo "Do not run on management node"
        exit
fi

source /etc/init.d/functions

PID=$(pidofproc pbs_mom)
if [ ! -z $PID ]
then
	echo "Do not run while mom is running"
	exit
fi

if [ $# -ne 0 ]
then
	test=1
fi

if [ -e /etc/authuser ]
then
	removelist="/etc/authuser"
	movelist=""
else
	removelist=""
	movelist=""
fi

for file in $(find /usr/spool/PBS/aux/ -type f)
do
	removelist="$removelist $file"
done

for file in $(find /usr/spool/PBS/mom_priv/jobs/ -type f)
do
	removelist="$removelist $file"
done

for file in $(find /usr/spool/PBS/spool/ -type f)
do
	rcp=$(echo $file | grep -c "rcperr")
	if [ $rcp -eq 0 ]
	then
		movelist="$movelist $file"
	fi
done

for file in $(find /usr/spool/PBS/undelivered/ -type f)
do
	movelist="$movelist $file"
done


if [ $test -eq 1 ]
then
	for file in $(echo $movelist)
	do
		owner=$(stat -c %U $file)
		if [ "$owner" == "UNKNOWN" ]
		then
			continue
		fi
		dir=$(eval echo ~$owner)
		if [ ! -d $dir/undelivered_output ]
		then
			echo "mkdir $dir/undelivered_output"
			echo "chown $owner $dir/undelivered_output"
		fi
		echo "mv $file $dir/undelivered_output"
	done
	for file in $(echo $removelist)
	do
		echo "rm -f $file"
	done
else
	for file in $(echo $movelist)
	do
		owner=$(stat -c %U $file)
		if [ "$owner" == "UNKNOWN" ]
		then
			continue
		fi
		dir=$(eval echo ~$owner)
		if [ ! -d $dir/undelivered_output ]
		then
			mkdir -v $dir/undelivered_output
			if [ $? -ne 0 ]
			then
				echo "ERROR: could not mkdir, leaving file $file"
				continue
			fi
			chown -v $owner $dir/undelivered_output
		fi
		mv -v $file $dir/undelivered_output
	done
	for file in $(echo $removelist)
	do
		rm -fv $file
	done
fi
