#!/bin/env python

# installnode

# set up config so that a node can be rebooted
# and installed with an operating system

# Written by Brett Pemberton (brett@vpac.org)
# Copyright (C) 2009 Victorian Partnership for Advanced Computing

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os
import getopt
import re
import time
import fileinput

pxebase = '/tftpboot/pxelinux.cfg'

def usage():
    print "usage: installnode [-l] | < -n node | -f nodefile > -t target"
    print "   -n : hostname of node to install"
    print "   -f : file containing hostnames of node to install"
    print "   -t : target install type"
    print "   -l : list valid target install types"
    sys.exit(0)

def valid_nodes(node_list):
    error_nodes = set()
    d = open('/etc/dhcpd.conf', 'r')
    dhcp = d.readlines()
    d.close()
    for node in node_list:
        match = False
        for line in dhcp:
            if re.search('^host ' + node + ' {', line):
                match = True
        if match == False:
            error_nodes.add(node)
    return error_nodes

def get_valid_targets():
    target_list = []
    if not os.path.isdir(pxebase):
        print "ERROR: %s is not a directory" % (pxebase)
        sys.exit(-1)
    filelist = os.listdir(pxebase)
    for file in filelist:
        if file.startswith('install.'):
            target_list.append(re.sub('^install.', '', file))
    target_list.sort()
    return target_list

def valid_target(target):
    target_list = get_valid_targets()
    if target in target_list:
        return True
    else:
        return False

def print_target(target):
    for line in fileinput.input(pxebase + '/install.' + target):
        if line.startswith('#DESC'):
            print "\t" + target + "\t" + line[5:],
            fileinput.close()
            return
    fileinput.close()
    return

def print_valid_targets():
    print "Valid install targets:"
    target_list = get_valid_targets()
    for target in target_list:
       print_target(target)
    print

def convert_ip_to_hex(ip):

    ip_regex = re.compile('(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.' \
                      '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.' \
                      '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.' \
                      '(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)')
    ip_match = ip_regex.match(ip)

    if (ip_match == None):
        print "Invalid address"
        sys.exit(1)

    hex_ip_addr = 0

    for i in range(1,5):
        hex_ip_addr += int(ip_match.group(i)) << (4-i)*8

    fmt = "%%0%dX" % ((32) / 4)
    return fmt % (hex_ip_addr >> 0)

def node_to_ip(node):
    h = open('/etc/hosts', 'r')
    hosts = h.readlines()
    h.close()

    for line in hosts:
        l = line.split()
        if node in l:
            return l[0]

    print "ERROR: couldn't find node %s in /etc/hosts" % (node)
    sys.exit(-1)

def ip_to_node(ip):
    d = open('/etc/dhcpd.conf', 'r')
    dhcp = d.readlines()
    d.close()

    prev = ""
    prev2 = ""

    for line in dhcp:
        if line.find('fixed-address ' + ip + ';') > -1:
            return prev2.split()[1]
        else:
            prev2 = prev
            prev = line

    print "ERROR: couldn't find ip address %s in /etc/dhcpd.conf" % (ip)
    sys.exit(-1)

def set_boot(node, target):
    node_ip = node_to_ip(node)
    node_hex = convert_ip_to_hex(node_ip)

    if os.path.islink(os.path.join(pxebase, node_hex)):
        os.remove(os.path.join(pxebase, node_hex))

    if target != "localboot":
        target = 'install.' + target
    os.symlink(target, os.path.join(pxebase, node_hex))

if __name__ == "__main__":

    target = False
    node_list = set()

    try:
        opts, args = getopt.getopt(sys.argv[1:], "f:t:n:l")
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err) # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    for opt in opts:

       if '-t' in opt:
           target = opt[1]

       if '-f' in opt:
           if not os.path.isfile(opt[1]):
               print "ERROR: file %s is not readable" % (opt[1])
               sys.exit(-1)
           f = open(opt[1], 'r')
           nodefile = f.readlines()
           f.close()
           for node in nodefile:
               node_list.add(node.strip())

       if '-n' in opt:
           node_list.add(opt[1])

       if '-l' in opt:
           print_valid_targets()
           sys.exit(0)

    if not (target and len(node_list) > 0):
        usage()

    if not valid_target(target):
        print "ERROR: target %s is not valid" % (target)
        print_valid_targets()
        sys.exit(-1)

    error_nodes = valid_nodes(node_list)
    if len(error_nodes) > 0:
        print "ERROR: these nodes are not valid:",
        for node in error_nodes:
            print node,
        print
        sys.exit(-1)

    print "target image: %s will be installed to nodes:" % (target),
    for node in node_list:
        print node,
    print

    for node in node_list:
        set_boot(node, target)

    print "Install prepared, please reboot nodes"

    current_position = 0

    log = open('/var/log/messages', 'r')
    log.seek(0, 2)

    partial = ""
    to_install_list = node_list

    while len(to_install_list) > 0:
        line = log.readline()
        if current_position != log.tell() and len(line) > 0:
            last_char = ord(line[-1])
            if last_char != 10:
                partial = line
                continue
            else:
                line = partial + line
                partial = ""
                if re.search("RRQ from .* filename pxelinux.0", line):
                    node_ip = line.split()[7]
                    node_installed = ip_to_node(node_ip)
                    if node_installed in to_install_list:
                        to_install_list.remove(node_installed)
                        time.sleep(2)
                        set_boot(node_installed, "localboot")
                        print "node: %s has been installed" % (node_installed)
                        if len(to_install_list) > 0:
                            print "nodes remaining:",
                            for n in to_install_list:
                                print n,
                            print
                        else:
                            print "All nodes installing"
                            log.close()
                            sys.exit(0)
                current_position = log.tell()
                time.sleep(1)

    log.close()

