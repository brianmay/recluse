#!/bin/bash

# edac
#
# Produce errors based on the contents of edac in /sys
#
# Written by Chris Samuel, csamuel@vpac.org
# Copyright (C) 2009 Victorian Partnership for Advanced Computing
#
# 20110110: Extended DIMM identification; Graham Jenkins, graham@vpac.org
# 20110216: Option to show DIMM if parameters entered; Graham Jenkins.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

########################################################################
# If we have one or more DIMM with these or more errors, we're bad.
allowed_per_dimm=8
# If we have more than these DIMMs with threshold or more ECC error, we're bad.
allowed_dimms_with_ecc=4; allowed_ecc_dimm_threshold=2;
# If we have more than these uncorrected ECC errors in total, we're bad.
allowed_bad_ecc_total=0
# If we have more than these corrected ECC errors in total, we're bad.
allowed_ok_ecc_total=24
# If we have more than these ECC messages in total, we're bad.
allowed_mce_messages=30
# If we have more than these L3 cache ECC errors, we're bad.
allowed_l3_errors=1
# If we have more than these L2 cache ECC errors, we're bad.
allowed_l2_errors=1
########################################################################

##
# Function to map EDAC strings to DIMM locations
##
map () {
  awk '{cpu   = 1 + substr($1,length($1),1)
        csrow = 4 - int(substr($2,length($2),1)/2) 
        if ($3 == "Ch0") {suffix="A"} else {suffix="B"}
        print "CPU"cpu " DIMM "csrow""suffix           }'
}

##
# Direct use of 'map' function
##
if [ $# -gt 0 ]; then
  if [ $# -eq 3 ]; then
    echo $1 $2 $3 | map ; exit 0
  else
    ( echo "Usage: `basename $0` [ mcI csrowJ chK ]"
      echo " e.g.: `basename $0` mc0 csrow0 ch1"    ) >&2 ; exit 2
  fi
fi

##
# If no EDAC support exit immediately
##

if [ \! -d /sys/devices/system/edac ]; then
	exit 0 ;
fi

##
# Allow per-node ignoring of mce
##

if [ -e /usr/local/recluse/nodestatus/forcestatus/$(hostname)-mce ]; then
	exit 0 ;
fi

##
# Default - we're OK
##

status=0

##
# If we have one or more DIMMs with $allowed_per_dimm or more errors, we're bad.
##

if [ ! -e /sys/devices/system/edac/mc/mc0 ]
then
	# No edac on this machine
	exit 0
fi

for i in /sys/devices/system/edac/mc/mc*/csrow*/ch?_ce_count; do
	if [ `cat $i` -gt $allowed_per_dimm ]; then
		DIMM=`echo $i | awk -F/ '{print $7 " " $8 " " $9}' | sed -e "s/_ce_count//" | map`
		echo "ERROR EDAC: $DIMM has `cat $i` corrected errors (DEEP)"
		status=1
	fi
done

##
# If we have $allowed_dimms_with_ecc DIMMs with more than $allowed_ecc_dimm_threshold errors, we're bad.
##

count=0

for i in /sys/devices/system/edac/mc/mc*/csrow*/ce_count; do
	if [ `cat $i` -gt $allowed_ecc_dimm_threshold ]; then
		(( count = $count  + 1 ))
	fi
done

if [ "$count" -gt "$allowed_dimms_with_ecc" ]; then
	if [ "$count" -eq 1 ]; then
		echo "ERROR EDAC: $count DIMM with $allowed_ecc_dimm_threshold or more errors (WIDE)"
	else
		echo "ERROR EDAC: $count DIMMs with $allowed_ecc_dimm_threshold or more errors (WIDE)"
	fi
	status=1
fi

##
# If we have more than $allowed_bad_ecc_total uncorrected ECC errors in total, we're bad.
##

count=0

for i in /sys/devices/system/edac/mc/mc*/ue_count; do
	if [ `cat $i` -gt 0 ]; then
		(( count = $count  + `cat $i` ))
	fi
done


if [ "$count" -gt "$allowed_bad_ecc_total" ]; then
	echo "ERROR EDAC: More than $allowed_bad_ecc_total uncorrected ECC errors in total ($count)"
	status=1
fi

##
# If we have more than $allowed_ok_ecc_total corrected ECC errors in total, we're bad.
##

count=0

for i in /sys/devices/system/edac/mc/mc*/ce_count; do
	if [ `cat $i` -gt 0 ]; then
		(( count = $count  + `cat $i` ))
	fi
done


if [ "$count" -gt "$allowed_ok_ecc_total" ]; then
	echo "ERROR EDAC: More than $allowed_ok_ecc_total corrected ECC errors in total ($count)"
	status=1
fi

##
# If we have more than $allowed_mce_messages ECC messages in total, we're bad.
# REMOVED - EDAC CATCHES ALL THESE FOR US
##
#
#count=0
#
#count=`egrep -c ^MCE /var/log/mcelog`
#
#if [ "$count" -gt "$allowed_mce_messages" ]; then
#	echo "ERROR ECC: More than $allowed_mce_messages ECC messages in total ($count)"
#	status=1
#fi

##
# If we have more than $allowed_l3_errors L3 cache ECC errors, we're bad.
# (Usually caught by scrub)
# REMOVED - NOT SEPARATELY REPORTED
##
#
#count=0
#
#count=`egrep -c bit4[23] /var/log/mcelog`
#
#if [ "$count" -gt "$allowed_l3_errors" ]; then
#	echo "ERROR ECC: L3 cache ECC errors (bit42 and/or bit43) ($count)"
#	status=1
#fi

##
# If we have more than $allowed_l2_errors L2 cache ECC errors, we're bad.
# (Usually caught by scrub)
# REMOVED - NOT SEPARATELY REPORTED
##
#
#count=0
#
#count=`fgrep -c L2 /var/log/mcelog`
#
#if [ "$count" -gt "$allowed_l2_errors" ]; then
#	echo "ERROR ECC: L2 cache ECC errors ($count)"
#	status=1
#fi

exit $status
