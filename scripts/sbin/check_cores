#!/bin/env python

# Written by Brett Pemberton (brett@vpac.org), Sam Morrison (sam@vpac.org)
# Copyright (C) 2008 Victorian Partnership for Advanced Computing

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys

# minimum levels to consider a process
min_mem = 10.0
min_cpu = 10.0

def print_process(process):

    proc = process[0]
    user = process[1]
    mem = process[2]
    cpu = process[3]
    core = process[4]
    command = process[5]

    print "['%s','%s','%s','%s','%s','%s']" % (proc, user, mem, cpu, core, command)


if __name__ == "__main__":

    from subprocess import Popen, PIPE
    proc = Popen(['/usr/local/recluse/scripts/bin/whatson', '-s'], stdout=PIPE, stderr=PIPE)
    return_code = proc.wait()
    if return_code == 0:
        whatson = proc.stdout.readlines()
    else:
        print "ERROR: %s:\n%s" % (return_code, proc.stderr.read())
        sys.exit(-1)

    maxcores = 0
    corecount = {}
    corelist = {}

    for line in whatson:
        ourline = line.split(None, 8)

        proc = ourline[0]
        user = ourline[1]
        mem = ourline[4]
        cpu = ourline[5]
        core = ourline[6]
        command = ourline[8].rstrip('\n')

        if float(mem) > min_mem or float(cpu) > min_cpu:
            if core > maxcores:
                maxcores = core

            if core in corecount:
                corecount[core] = corecount[core] + 1
            else:
                corecount[core] = 1

            current_corecount = corecount[core]

            if current_corecount == 1:
                corelist[core] = {}
            corelist[core][current_corecount] = (proc, user, mem, cpu, core, command)

    for core in range(0, int(maxcores) + 1):
        if str(core) in corecount:
            core_processes = corecount[str(core)]

            if core_processes > 1:
                print "core %s has %s processes" % (core, core_processes)

                for process in range(1, int(core_processes) + 1):
                    print_process(corelist[str(core)][process])
