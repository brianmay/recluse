#! /usr/bin/env python

# node_timeline
#
# investigate PBS logs, and print a timeline of what jobs
# ran on a node
#
# Written by Brett Pemberton, brett@vpac.org
# Copyright (C) 2008 Victorian Partnership for Advanced Computing

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import datetime
import sys
import os
import pwd
import getopt

pbs_dir = "/usr/spool/PBS"
node = "test"
print_exec_host = False
verbose = False
joblist = []


def usage():
    print "usage: node_timeline [-e] [-v] [-n number of days] node"
    print "   -e : print exec_host"
    print "   -v : verbose"
    sys.exit(0)


def job_exists(job):
    if joblist.count(job) == 1:
        return True


def add_job(job):
    if joblist.count(job) == 0:
        joblist.append(job)


def remove_job(job):
    if joblist.count(job) == 1:
        joblist.remove(job)
        return True
    else:
        return False


def process_line(line, status):
    if verbose:
        print line
    splitline = line.split(' ')
    date = splitline[0]
    time = splitline[1].split(';')[0]
    job = splitline[1].split(';')[2].split('.')[0]
    if status == 'D':
        user = splitline[1].split('=')[1]
        if remove_job(job) == True:
            print date + " " + time + " job " + job + " deleted by " + user
        return
    if status == 'A':
        if remove_job(job) == True:
            print date + " " + time + " job " + job + " aborted"
        return
    user = splitline[1].split('=')[1]
    exec_host = splitline[11].split('=')[1]
    if exec_host.find(node) > -1:
        if print_exec_host:
            if status == 'S':
                print date + " " + time + " job " + job + " started on " + exec_host + " by " + user
            elif status == 'E':
                print date + " " + time + " job " + job + " ended on " + exec_host + " by " + user
        else:
            if status == 'S':
                print date + " " + time + " job " + job + " started by " + user
            elif status == 'E':
                print date + " " + time + " job " + job + " ended by " + user
        if status == 'S':
            add_job(job)
        else:
            remove_job(job)
    else:
        if status == 'E':
            if job_exists(job):
                remove_job(job)
        if status == 'S':
            if job_exists(job):
                print "Ignore previous start"
                remove_job(job)


def process_log(logfile):
    if verbose:
        print "looking at log: " + logfile
    try:
        readlog = open(logfile, "r")
    except:
        return
    while 1:
        line = readlog.readline()
        if not line:
            break
        status = line.split(';')[1]
        if status == 'E' or status == 'D' or status == 'S' or status == 'A':
            process_line(line, status)

if __name__ == "__main__":

    number_of_days = 0

    try:
        opts, args = getopt.getopt(sys.argv[1:], "n:ev")
    except getopt.GetoptError, err:
        # print help information and exit:
        print str(err)       # will print something like "option -a not recognized"
        usage()
        sys.exit(2)

    #Parse Opts
    opts = dict(opts)

    if '-n' in opts:
        number_of_days = opts['-n']

    if '-e' in opts:
        print_exec_host = True

    if '-v' in opts:
        verbose = True

    if len(args) != 1:
        usage()

    node = args[0]

    today = datetime.date.today()

    for i in range(int(number_of_days), -1, -1):
        difference = datetime.timedelta(days=i)
        current = today - difference

        currentlog = current.strftime("%Y%m%d")

        process_log(pbs_dir + "/server_priv/accounting/" + currentlog)

    print joblist
