#! /usr/bin/env python

# nodechecker
#
# Compare processes on compute nodes with what is expected
#
# Written by Brett Pemberton, brett@vpac.org
# Copyright (C) 2009 Victorian Partnership for Advanced Computing

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import re
import pbs
from PBSQuery import PBSQuery
import getopt

jobmap = {}
nodejobs = {}
procowners = []

def get_job_map():

    p = PBSQuery()
    jobs = p.getjobs()
    for name, job in jobs.items():
        if job['job_state'] == "R" or job['job_state'] == "E":
            owner = job['euser']
            jobnum = name.split('.')[0]
            jobmap[jobnum] = owner

def get_node_info():

    p = PBSQuery()
    nodes = p.getnodes()

    for name, node in nodes.items():
        if 'jobs' in node:
            nodejobs[name] = node['jobs']
        else:
            nodejobs[name] = ""

def get_proc_info():

    from subprocess import Popen, PIPE
    proc = Popen(['/usr/local/bin/dsh', '-f', '-N', 'compute', '/usr/local/recluse/scripts/bin/whosonnode'], stdout=PIPE, stderr=PIPE)
    return_code = proc.wait()
    if return_code == 0:
        dsh_out = proc.stdout.read()
        dsh_err = proc.stderr.read()
    else:
        print "ERROR: %s:\n%s" % (return_code, proc.stderr.read())
        sys.exit(-1)

    dsh_list = dsh_err.split('\n')

    for line in dsh_list:
        if re.search('^\w*:\s*\w*$', line):
            line_split = line.split(': ')
            procowners.append({line_split[0]: line_split[1].strip()})

def compare_procs_with_jobs():

    exit_status = 0

    for dict in procowners:

        has_owner = 0

        node = dict.keys()[0]
        proc_owner = dict.values()[0]

        if verbose:
            print "dealing with " + proc_owner + " on " + node

        jobs = nodejobs[node]

        jobs_split = jobs.split(',')
        for job in jobs_split:
            if job != "":
                num = re.split('[\./]', job)[1]
                if jobmap[num] == proc_owner:
                    has_owner = 1

        if has_owner == 0:
            print "rogue process owned by: " + proc_owner + " on " + node
            exit_status = 1

    return exit_status

if __name__ == "__main__":

    verbose = False

    opts, args = getopt.getopt(sys.argv[1:], 'v')
    opts = dict(opts)

    if '-v' in opts:
        verbose = True

    if verbose:
        print "Getting job map:"

    get_job_map()

    if verbose:
        print jobmap

    if verbose:
        print "Getting node info:"

    get_node_info()

    if verbose:
        print nodejobs

    if verbose:
        print "Getting process info:"

    get_proc_info()

    if verbose:
        print procowners

    exit_status = compare_procs_with_jobs()

    sys.exit(exit_status)
