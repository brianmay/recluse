#!/bin/bash
#
# pbs
#
# Script to stop and restart the pbs daemons, depending on which node it is running on.
#
# Written by David Bannon, <dbannon@vpac.org>
# Copyright (C) 2003 Victorian Partnership for Advanced Computing

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# chkconfig: 345 99 02
# description: Torque(PBS) daemon

# NODETYPE can be 'compute' or managment'. Later might also use 'head' and 'storage'.
NODETYPE="compute"
export PBSCOREDUMP=true

source /etc/init.d/functions

CONFIG=/usr/local/recluse/config
[ -r "$CONFIG" ] || echo "Can't source $CONFIG"
[ -r "$CONFIG" ] || exit 0
source $CONFIG

PATH=$PATH:/usr/local/sbin:/usr/local/bin

start() {
	parent=$(ps aux | awk -v PPID=$PPID '{ if ($2 == PPID) { print $11 " " $12}}')
        if [ "$parent" == "/bin/bash /etc/rc.d/rc" ]
	then
		if [ -e /etc/starttorque ]
	        then
	                rm -f /etc/starttorque
			# clear authuser file, if it exists
			rm -f /etc/authuser
	        else
	                return 1;
	        fi
	fi

	if [ "$NODETYPE" = "managment" ]
	then
		PID=$(pidofproc pbs_server)
		if [ -z $PID ]
		then
			ulimit -n 20480
			ulimit -c unlimited
			ulimit -a
			pbs_server
		else
			echo "Hmm, strange, pbs_server was already running!"
		fi
		return 0
	fi
	
	# If to here cannot be managment node so just run pbs_mom.
	PID=$(pidofproc pbs_mom)
	if [ -z $PID ]
	then
		# the -p says adopt running jobs, a good idea. 
		pbs_mom -pc /usr/local/etc/pbs_mom.conf
	else
		echo "Thats funny, pbs_mom was already running!";
	fi

	PID=$(pidofproc pbs_mom)
	if [ -z $PID ]
	then
		echo "Failed to start pbs_mom on $(hostname)"
		return 1
	fi

	return 0

}



stop() {
	if [ "$NODETYPE" = "managment" ];
	then
		qterm -t quick
		return 0
	fi

	# If to here, it must be a compute node, deal with mom.

	PID=$(pidofproc pbs_mom)
	if [ ! -z $PID ]
	then
		kill -9 $PID
	else
		echo "Strange, mom does not appear to be running!"
	fi
}


restart() {
	if [ "$NODETYPE" = "managment" ]
	then
		PID=$(pidofproc pbs_server)
		if [ ! -z $PID ]
		then
			echo "Old Server PID is $PID"
		fi
	else
		PID=$(pidofproc pbs_mom)
		if [ ! -z $PID ]
		then
			echo "Old mom PID is $PID"
		fi
	fi

	stop
	sleep 1
	start

	if [ "$NODETYPE" = "managment" ]
	then
		PID=$(pidofproc pbs_server)
		if [ ! -z $PID ]
		then
			echo "New Server PID is $PID"
		fi
	else
		PID=$(pidofproc pbs_mom)
		if [ ! -z $PID ]
		then
			echo "New mom PID is $PID"
		fi
	fi
}

status() {
	if [ "$NODETYPE" = "compute" ]
	then
		PID=$(pidofproc pbs_mom)
		if [ -z $PID ]
		then
			echo "Error, pbs_mom not running on " $(hostname)
		else
			echo "OK, pbs_mom is running ($PID) on" $(hostname)
		fi
	else
		PID=$(pidofproc pbs_server)
		if [ -z $PID ]
		then
			echo "Error, pbs_server is not running on " $(hostname)
		else
			echo "OK, pbs_server is running ($PID) on " $(hostname)
		fi
	fi
}


RETVAL=0

if [ "$(hostname)" == "$mgtnode" ];
	then NODETYPE="managment";
fi;

case "$1" in
  start)
	ulimit -l unlimited
	start
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch /var/lock/subsys/torque
	;;
  stop)
	stop
	RETVAL=$?
	[ $RETVAL -eq 0 ] && rm -f /var/lock/subsys/torque
	;;
  restart)
	restart
	RETVAL=$?
	;;
  status)
	status
	RETVAL=$?
	;;
  *)
	echo $"Usage : $0 {stop, start, restart, status}"
	exit 1
esac

exit $RETVAL
